ISSUES
- I think there are a lot of excessive empty tags in the recs in sResources
- no scopeRef info
-- 10,31,48,55,58,65,70,72,83,85
-- 48,55,70,85 = link
- check to make sure user can't put a prev link into an input node or a next link into an output node
- resource calculations don't respect material/equipment difference
-- equipment distinguished by having skim and next and trim, not prev
-- calculation depends on change series/parallel
- not sure how to incorporate changes in scope into the resouce calculation
-- scope means it's the same node, but more specific information
-- not sure exactly what that means in a project or between projects
-- at the moment subgraphs are just balanced independently
-- probably need to have links crossing scope levels
- the links overlap and it's impossible to select one on the bottom
-- maybe if you click on an already selected link it moves to the bottom to force them to rotate position? maybe double click a link moves it to the bottom.
- how did sGraphics get an " " as one of its keys? noticed when trying to fill the tooltips in render
- can't copy the text instructions to the clipboard, at least not when open in the IDE
- I think sExpanded is silently assuming the current doc
- repace hack that overwrites project title node's coord for dive/rise links in calcLinkCoord
- userInfo, check to be sure input is formatted correctly
- userFile, I gave up on figuring out absolute-vs-relative paths for files
-- the application itself is going to run in a folder
-- the user is probably going to work on thier project in an entirely different folder
-- they might pull in files from even more different folders
-- at a minimum, platypus should store the filename & extension
-- but what if the project has folders? store the relative path? search for the file?
-- livecode has a lesson converting-an-absolute-path-to-a-relative-path

FEATURES
- handle more supply balancing options
-- right now all supplying links are increased by the same gravity
-- it could be possible to produce less or zero excess by "solving" all the available supply options; increase gravity on each supply action differently to minimize supply/demand differential
- allow user to specify different gravity sharing among suppliers
-- if supply needs to be increased, and there is more than one supplier of that state, it's possible for them to share the gravity unequally
- use style file to specify series/parallel change
-- use subgraph instead of tags?
-- if you have to do it 4 times, you could do 4-series, or 4-parallel, or 2-series in parallel, etc.
-- the math for input/output depends on which approach the user wants to choose. there's a different equipment max for each, and in a project mgmt sense different resources need to be available at different times.
-- also, a subgraph in a change can describe a multi-node process that can be done in parallel. at the moment series/parallel calculations only work for a single change node, not for multiple nodes, but that scope could be a subgraph and the one node could be done in parallel
- display dive/rise more intuitively
-- maybe a new, sightly smaller border for the graph group with the container node embedded in it
-- maybe an outline around the contained nodes
-- maybe multi-segment dive/rise links
- project management
-- people and labor
-- time (duration tag with units)
-- PERT, slack, critical path, GANTT chart, etc
- maybe use popup to create a right-click menu for entering information
- maybe timestamp each record? don't have a use for it at the moment
- auto select new node when created
- write interactive instruction view
-- allow selecting and editing through the instructions display
-- rewrite to display in a list; maybe a datagrid form, maybe rTree
- write flow alternatives
-- at the moment all links are assumed to be necessary
-- need some kind of boolean to create alternatives
-- use style file; don't include idle alternatives in sMainShort; all existing logic will continue to work
- create style file
-- everyone will make slightly different choices in a complex project
-- need to save those choices, but keep them separate from platypus itself
- enable non-text data
- convert pointers to full URL
- architect the graphicalNetwork the same as rTree
-- pass it an array describing everything it's supposed to do in one formatted place
-- at the moment it's being calculated piecemeal
- allow user to change zoom level in graphicNetwork
-- reset view to default x,y when opening/new
-- reset scale
-- save x,y & scale to style file(?)
- allow intermediate points the link has to be drawn through
- allow for direct changes rather than having to delete then create something new
-- use right click popup context menu
- provide more options for what to do when hiding a step
-- allow user to hide more than one item at a time
- modify userState/Change/Bond/Flow/Dive/Rise
-- instead of just creating a new step, change an existing step to a different type
-- if same type clicked again, reverse link direction
-- this would mean giving the user a way to clear the current selection
- allow for more than one open doc at a time
-- userNew is empty
-- sNowDoc always equals 1
-- automatically calls for a new blank doc when active doc closes
- allow drag of multiple nodes simultaneously
-- maybe allow shift-select to hilite all intermediate nodes listed in topo sort
-- drag moves all hilited nodes, not just the node dragged
- enable area select; all steps inside box
-- maybe allow a free form select; draw a polygon around or thru whatever you want

GLOSSARY
- step: a node or a link
-- node
--- state: a thing that is true at an instant in time
--- change: an action, over a period of time, that converts from one state to another
-- link
--- bond: undirected link in the project dimension
--- flow: directional link in the project dimension; sequence of steps
---- next: forward
---- prev: backwards
--- dive: directional link in the scope dimension; from summary to detailed; from container node to start of contained flowed nodes
---- read: forwards
---- skim: backwards
--- rise: directional link in the scope dimension; from detailed to summary; from end of contained flowed nodes to container node
---- trim: forwards
---- bulk: backwards
- tag: a piece of information attached to a step
- turn: an historical record of a function that altered the platypus file (basically a step along the time dimension instead of the project dimension)
- types: state/change, bond/flow(next/prev), dive(read/skim)/rise(trim/bulk)
- dimensions: project (next/prev state/change), time (turn/myTurn), scope (dive/rise, read/skim, trim/bulk)
- platypus
-- file: a list of documents
-- document: a list of records
-- record: whole number keys from 1 to infinity, with data
-- pointer: string identifying another record
--- positive: #,# (target record),(record of turn that created this pointer)
--- negative: -#,# (EX: if 1,2 and -1,3 are in the same list they cancel out)
- material vs equipment: all states are material (used up during the project) unless they have both dive and rise links to the container node. In that case they're equipment (not used up during the project)
- series: true/false, unspecified is true; means calculations assume multiples of this change happen one after the other; false (parallel) means calculations assume multiples of this change happen at the same time. This affects the maximum amount of equipment necessary. The parallel calculation only works for one change node, not for  a series of nodes.
- action: A change and all the states linked to it; the smallest unit of a platypus project. state > change > state. States belong to more than one action.
- weight: links are assumed to have a weight of 1. A higher weight can be assigned. State >5> change means the change demands 5 copies of that state. Change >5> state means the state supplies 5 copies of that state. Dive/rise links can also have weights, which communicates outside of the project. A dive weighted 5 means there are 5 of that state supplied to the project. A rise weighted 5 means 5 copies of that state are demanded of the project. 
- gravity: link weight can be modified by gravity, which is not assigned, it's calculated. If an action supplies 1 state, but the following action demands 2 copies, then the preceeding action's gravity is increased from 1 (default) to 2, which modifies all of that action's link weights. The preceeding action would then be demanding twice as many copies of its supply states. 

KEYWORDS
- act
- coord
- myStep
- myTurn
- newItem
- redo
- state
- step
- title
- turn
- type
- undo
- userRedo
- userUndo

PLATYPUS DATA STRUCTURE
- system > file > document > record > tag > data
- any number of systems; any number of .plat files on system; unlimited number of documents in single .plat file (counting up from 1); unlmited number of records in single document (counting up from 1); any number of tags in record; any amount of text data in tags
- nothing is recorded directly in platypus that can't be represented as a string 
- working structure is a nested array; should be saved as human readable JSON or YAML string
- platypus uses a network of records and pointers to allow unlimited links to single record of information; platyvue uses the records/pointers to build a network of nodes and links that the user works with
- full pointer: http://www.foobar.com/myproject.plat?doc=1&rec=17&tag=title (another server)
--------------- c:/documents/myproject/foobar.plat?doc=4&rec=72 (another drive)
--------------- doc=7&rec=67 (another document)
--------------- 29 (another record in same document)
- metadata
-- record 0 used for data like lastKey (the highest record number used), file paths, version numbers, etc
- system generated record tags
-- step/turn: first keyword, like index.html; data is pointers
-- myTurn/myStep: this record is attributed to that turn or step

sGraphics is an array with important information for the graphicalNetwork
[doc][rec][longID] (for node & link)
[doc][rec][coord]=1,2(for node)
[doc][rec][links]=1,2,3(for node)
[doc][rec][type]=string (for link)
[doc][rec][Xnode]=1(for link)
[doc][rec][Znode]=1(for link)
all graphics (identified by longID) have these properties
longID has cRecKey=# and points and loc(ation)

sMainShort is an array that simplifies Platypus into a normal adjacency list
[doc][rec][type]=string (state, change, etc)
[doc][rec][read/bulk/skim/next/prev/etc]=return delimited list of recs
[doc][rec][info]=string of all non-system tag:data pairs
[doc][rec][weight]=user defined multiple on a link

sResources is an array about resources (duh); calculated values
[doc][rec][gravity]=number to multiply the weight by to get total supply/demand
[doc][rec][excess]=number of supply not demanded
[doc][rec][totSupply]=number total copies of state supplied
[doc][rec][totDemand]=number total copies of state demanded
[doc][rec][scopeRef]=list (comma & cr) #,position 1/2/3...n,top/in/thru/out record can have multiple lines like 1,thru&cr&2,top with 1 meaning highest reference level in this document and 0 meaning it isn't related to a reference level

IMPORTANT NOTES ABOUT PLATY-PUS
- it's a network (nodes/links) built out of another network (records/pointers)
-- this allows information to be categorized more than once (project/history/scope...)
-- but only be recorded once; data can be a child of a step and a turn simultaneously
- by design, nothing is ever deleted
-- every change (even undo/redo) creates a new turn
-- the pointer to data can be negated in the future, a negated pointer is ignored
-- steps with all negated pointers are ignored (effectively hidden)
-- data will not be displayed if no step points to it (effectively hidden)
-- the only way to actually delete something is to edit the raw .plat file outside of platypus
- there shouldn't be more than one link between the same two nodes
- dimensions can intersect and affect the same record
-- the project dimension is states and changes linked by flow
-- the time dimension is from record 1 in the past, thru turns, to the present status
-- the scope dimension is dive into a node to find many nodes, rise up to the container node
--- scope is higher (more abstract) to lower (more detailed)
--- scoping requires a loop made out of dive, thru the project dimension, then rise back to original node
- all turns produce at least one new record (other than their own)
-- usually the new record(s) is new information for the network
-- if not, then it's a pointer to the pre-existing thing that the turn altered
-- also, the turn's pointer(s) can be negated/positied when the turn is undone/redone
-- the link tags are a bit redundant, but it keeps the "type" tag consistent for all steps
- you can record that a change should be done more than once, but not on the output of the change. instead, record that the state the change produced is required for the next change in greater numbers than the previous change produced. the change should be one indivisible action, which can be done more than once.
- 

IMPORTANT NOTES ABOUT PLATY-VUE
- the select or drag in graphicNetwork relies on a "wait for 100" line; might not work everywhere
- savedField is mostly controlled from the script attached to the File button
- easyJSON is modified to treat all arrays like they have non-numeric keys; maintains array sort
- easyJSON now has a couple short commands because dispatch doesn't work with functions, only commands
- commented out pass preOpenStack message in rTreeEngine stack script. reasons.
- using dive/rise to contain more detailed nodes only allows one set. If a node is a container, all nodes linked by dive/rise are assumed to be in one set; you can't have two different sets.
- A container node shows up twice in the topological sort. First when the sort gets to it for the first time and again when all of its contained steps have been visited.
- if flow is not of the pattern state > change > state then calculated results probably won't make sense
- supplyDemand and gravity balancing assume infinite supply is available. that will have to change when the user can define finite resources